{"version":3,"sources":["base.js"],"names":["$","document","ready","on","top","behavior"],"mappings":"aAAAA,EAAEC,UAAUC,MAAM,WACdF,EAAE,sBAAsBG,GAAG,QAAS,WADtCF,OAAUC,SAAM,CAAAE,IAAM,EAAAC,SAAA","file":"base.js","sourcesContent":["$(document).ready(() => {\n    $(\"#scroll-top-button\").on(\"click\", () => {\n        window.scrollTo({top: 0, behavior: 'smooth'});\n    });\n});\n\n// nv.addGraph(function() {\n//     var chart = nv.models.lineChart()\n//                   .margin({left: 100})  //Adjust chart margins to give the x-axis some breathing room.\n//                   .useInteractiveGuideline(true)  //We want nice looking tooltips and a guideline!\n//                   .showLegend(true)       //Show the legend, allowing users to turn on/off line series.\n//                   .showYAxis(true)        //Show the y-axis\n//                   .showXAxis(true)        //Show the x-axis\n//     ;\n  \n//     chart.xAxis     //Chart x-axis settings\n//         .axisLabel('Time (ms)')\n//         .tickFormat(d3.format(',r'));\n  \n//     chart.yAxis     //Chart y-axis settings\n//         .axisLabel('Voltage (v)')\n//         .tickFormat(d3.format('.02f'));\n  \n//     /* Done setting the chart up? Time to render it!*/\n//     var myData = sinAndCos();   //You need data...\n  \n//     d3.select('#chart svg')    //Select the <svg> element you want to render the chart in.   \n//         .datum(myData)         //Populate the <svg> element with chart data...\n//         .call(chart);          //Finally, render the chart!\n  \n//     //Update the chart when window resizes.\n//     nv.utils.windowResize(function() { chart.update() });\n//     return chart;\n//   });\n\n//   function sinAndCos() {\n//     var sin = [],sin2 = [],\n//         cos = [];\n  \n//     //Data is represented as an array of {x,y} pairs.\n//     for (var i = 0; i < 100; i++) {\n//       sin.push({x: i, y: Math.sin(i/10)});\n//       sin2.push({x: i, y: Math.sin(i/10) *0.25 + 0.5});\n//       cos.push({x: i, y: .5 * Math.cos(i/10)});\n//     }\n  \n//     //Line chart data should be sent as an array of series objects.\n//     return [\n//       {\n//         values: sin,      //values - represents the array of {x,y} data points\n//         key: 'Sine Wave', //key  - the name of the series.\n//         color: '#ff7f0e'  //color - optional: choose your own line color.\n//       },\n//       {\n//         values: cos,\n//         key: 'Cosine Wave',\n//         color: '#2ca02c'\n//       },\n//       {\n//         values: sin2,\n//         key: 'Another sine wave',\n//         color: '#7777ff',\n//         area: true      //area - set to true if you want this line to turn into a filled area chart.\n//       }\n//     ];\n//   }\n  "]}