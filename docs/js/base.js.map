{"version":3,"sources":["base.js"],"names":["createPlotlyDataMeanWithSem","x","mean","sem","color","bottom_values","map","v","i","width","top_values","mode","line","main_trace","y","fill","bottom_trace","showlegend","top_trace","$","on","window","scrollTo","behavior","data","Plotly","newPlot","legend","displayModeBar","staticPlot","responsive"],"mappings":"aAAA,SAASA,4BAA4BC,EAAGC,EAAMC,EAAKC,GAC/C,IAAMC,EAAgBH,EAAKI,IAAI,SAACC,EAAGC,GAAJ,OAAUD,EAAIJ,EAAIK,KAD5CR,EAAAA,EAAAA,IAAAA,SAAAA,EAATQ,GAASR,OAA+BE,EAAMC,EAA9CK,KA8BYC,MAAK,CA7BkB,CAA/BR,EAAAA,EACMS,EAAAA,EAAsBC,KAAW,QAAvCC,KAAA,CAEMC,MAAa,kBAEZX,KAFY,QAIT,CACFE,EAAKH,EALMa,EAAAT,EAOXM,KAAE,QAPVI,KAAA,OASMC,KAAAA,CAAeP,MAAA,GAGbQ,YAHa,GAKX,CACFR,EAAKR,EANQa,EAAAJ,EAQjBO,KAAU,QARdF,KAAA,UAUMG,UAAY,sBAAAN,KAAA,CAEXF,MAFW,GAIVO,YAJU,IAkBtBE,EAAE,WAAAA,EAAA,sBAAMC,GAAA,QAAA,WACFC,OAAAC,SAAD,CAAuBF,IAAG,EAAAG,SAAS,aACNA,IAoBHC,EAAAxB,4BApBW,CAAA,sBAAE,sBAAA,sBAAA,uBAApC,CAAA,EAAA,EAAA,EAAA,GADJ,CAAA,EAAA,EAAA,EAAA,IAgCJyB,OAAAC,QAAA,QAAAF,EAnBI,CAKMA,MAAOxB,wCAAuC2B,QAAA,GAKpC,CAHhBC,gBAAA,EAMMC,YAAS,EAGnBC,YAAA","file":"base.js","sourcesContent":["function createPlotlyDataMeanWithSem(x, mean, sem, color) {\n    const bottom_values = mean.map((v, i) => v - sem[i]);\n    const top_values = mean.map((v, i) => v + sem[i]);\n\n    const main_trace = {\n        x: x,\n        y: mean,\n        mode: 'lines',\n        line: {\n            color: 'rgb(255, 0, 0)',\n        },\n        name: 'data',\n    };\n    const bottom_trace = {\n        x: x,\n        y: bottom_values,\n        mode: 'lines',\n        fill: 'none',\n        line: {\n            width: 0\n        },\n        showlegend: false,\n    };\n    const top_trace = {\n        x: x,\n        y: top_values,\n        mode: 'lines',\n        fill: 'tonexty',\n        fillcolor: 'rgba(255, 0, 0, .1)',\n        line: {\n            width: 0\n        },\n        showlegend: false,\n    };\n\n    return [\n        main_trace, bottom_trace, top_trace\n    ]\n}\n\n\n$(() => {\n    $(\"#scroll-top-button\").on(\"click\", () => {\n        window.scrollTo({ top: 0, behavior: 'smooth' });\n    });\n\n    const x = ['2013-10-04 22:23:00', '2013-11-04 22:23:00', '2013-12-04 22:23:00',  '2014-01-04 22:23:00']\n    const d = [0, 2, 3, 5];\n    const sem = [1, 2, 3, 4];\n\n    \n\n\n    \n\n    const layout = {\n        title: 'Overlaid Chart Without Boundary Lines',\n        legend: false,\n    };\n\n    const data = createPlotlyDataMeanWithSem(x, d, sem);;\n\n    const config = {\n        displayModeBar: false, // this is the line that hides the bar.\n        staticPlot: true,\n        responsive: true,\n    };\n\n    Plotly.newPlot('myDiv', data, layout, config);\n});\n\n// nv.addGraph(function() {\n//     var chart = nv.models.lineChart()\n//                   .margin({left: 100})  //Adjust chart margins to give the x-axis some breathing room.\n//                   .useInteractiveGuideline(true)  //We want nice looking tooltips and a guideline!\n//                   .showLegend(true)       //Show the legend, allowing users to turn on/off line series.\n//                   .showYAxis(true)        //Show the y-axis\n//                   .showXAxis(true)        //Show the x-axis\n//     ;\n\n//     chart.xAxis     //Chart x-axis settings\n//         .axisLabel('Time (ms)')\n//         .tickFormat(d3.format(',r'));\n\n//     chart.yAxis     //Chart y-axis settings\n//         .axisLabel('Voltage (v)')\n//         .tickFormat(d3.format('.02f'));\n\n//     /* Done setting the chart up? Time to render it!*/\n//     var myData = sinAndCos();   //You need data...\n\n//     d3.select('#chart svg')    //Select the <svg> element you want to render the chart in.   \n//         .datum(myData)         //Populate the <svg> element with chart data...\n//         .call(chart);          //Finally, render the chart!\n\n//     //Update the chart when window resizes.\n//     nv.utils.windowResize(function() { chart.update() });\n//     return chart;\n//   });\n\n//   function sinAndCos() {\n//     var sin = [],sin2 = [],\n//         cos = [];\n\n//     //Data is represented as an array of {x,y} pairs.\n//     for (var i = 0; i < 100; i++) {\n//       sin.push({x: i, y: Math.sin(i/10)});\n//       sin2.push({x: i, y: Math.sin(i/10) *0.25 + 0.5});\n//       cos.push({x: i, y: .5 * Math.cos(i/10)});\n//     }\n\n//     //Line chart data should be sent as an array of series objects.\n//     return [\n//       {\n//         values: sin,      //values - represents the array of {x,y} data points\n//         key: 'Sine Wave', //key  - the name of the series.\n//         color: '#ff7f0e'  //color - optional: choose your own line color.\n//       },\n//       {\n//         values: cos,\n//         key: 'Cosine Wave',\n//         color: '#2ca02c'\n//       },\n//       {\n//         values: sin2,\n//         key: 'Another sine wave',\n//         color: '#7777ff',\n//         area: true      //area - set to true if you want this line to turn into a filled area chart.\n//       }\n//     ];\n//   }\n"]}