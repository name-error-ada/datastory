{"version":3,"sources":["wordcloud.js"],"names":["HslColorPicker","hue","_classCallCheck","this","d3","randomNormal","saturation","randomUniform","lightning","concat","min","max","WordCloud","id","svg","select","svgSize","undefined","processingId","activeWordGroup","result","attr","y","words","processId","colorPicker","transition","appearTransition","delay","duration","style","remove","d","sizeX","newGroup","append","sizeY","selectAll","data","enter","i","getColor","rotate","size","text","maxSize","layout","x","map","w","on","_this","start","$","json","then","cloud","padding","slice"],"mappings":"uZAAMA,e,WACF,SAAAA,EAAYC,GAAKC,gBAAAC,KAAAH,GACbG,KAAKF,IAAMG,GAAGC,aAAaJ,EAAK,IAChCE,KAAKG,WAAaF,GAAGG,cAAc,GAAI,KACvCJ,KAAKK,UAAYJ,GAAGG,cAAc,GAAI,I,6CAG1C,WANA,MAOgB,OAAAE,OAAUL,GAAGM,IAAI,CAAC,IAAKN,GAAGO,IAAI,CAAC,EAAGR,KAAKF,UAAvC,MAAAQ,OAAqDN,KAAKG,aAA1D,OAAAG,OAA4EN,KAAKK,YAAjF,U,KALZI,U,WACA,SAAAA,EAAKJ,GAALN,gBAAAC,KAAAS,GACHT,KAAAU,GAAAA,EAWGV,KAAKW,IAAMV,GAAGW,OAAH,IAAAN,OAAcI,IACzBV,KAAKa,aAAUC,EACfd,KAAKe,aAAe,EACpBf,KAZJgB,qBAAWF,EACPd,KAAMiB,Q,0CAeV,WAGIjB,KAAKW,IAAIO,KAAK,UAAd,OAAAZ,OADsB,IACtB,KAAAA,OAD2B,MAE3BN,KAAKa,QAAU,CAdjBJ,EAYwB,IAX1BU,EAW+B,O,uBAT3B,SAAAC,EAAcR,EAAHS,GACX,IAQ2BC,EAClBJ,EATJL,IAAUC,KAAfC,eACKA,EAALd,GAAAsB,kBAEAT,IAAAd,KAAAgB,kBACHQ,EAAAA,EAAAC,MAAA,KAkBWzB,KAAKgB,gBACAO,aACAG,SAAS,KAlB1BC,MAAA,UAAQ,GACYC,UACWN,EAA3B,IAAAzB,eAAA,KACSqB,EAAKjB,GAAdO,IAAAY,EAAA,SAAAS,GAAA,OAAgCC,EAAAA,OAChCC,EAAe/B,KAAAW,IAAAqB,OAAA,KAERC,KAAAA,YAFQ,aAAA3B,OAER2B,EAAAA,OAAAA,GAAAA,EAFQ,KAAA3B,OAER2B,EAAAA,OAAAA,GAAAA,EAFQ,MAAfjC,KAAAgB,gBAAAe,EAIH/B,KAAAgB,gBAqBYkB,UAAU,QACVC,KAAKf,GApBlBgB,QACQf,OAAc,QACVG,KAAAA,cAAsBD,UAsBrBL,KAAK,OAAQ,SAACW,EAAGQ,GAAJ,OAAUf,EAAYgB,aApB/BtB,KAAAA,YAAL,SAAAa,GAAA,MAAA,aAAAvB,OACmBkB,EAAAA,EADnB,MAAAlB,OACmBkB,EAAAA,EADnB,aAAAlB,OACmBuB,EAAnBU,OADA,OAEKvB,MAAAA,UACAO,GAIRI,MAAA,YAAA,SAAAE,GAAA,MAAA,GAAAvB,OAAAuB,EAAAW,KAAA,QAkBIC,KAAK,SAAAZ,GAAC,OAAIA,EAAEY,OAjBXnB,WAAcE,GACdkB,SAAalC,SAAAA,GAAAA,OAAIY,IAAQ,KAAD,EAAAS,EAAAW,KAACE,KAAIb,MAAJ,UAAA,M,yBAK/B,SAAKb,GAAAA,IAAAA,EAAAA,KAMa2B,EAAUrB,GAAAA,OAAYgB,QACnCpB,KAAK,CAAAlB,KAAAa,QAAa+B,EAAA5C,KAACa,QAAAM,IAAAC,MAAAA,EAAAyB,IAAA,SAAAC,GAAA,MAAA,CAPxBL,KASWK,MAENL,QAAK,GAACF,OAAME,SAAAA,EAANJ,GAAMI,OAANJ,EAAA,EAAA,KACNd,SAAWC,SAAAA,EAAAA,GAAAA,OAAAA,KAAAA,IACXE,GAAAA,GAAS,EAAAW,KAACU,GAAA,MAAU,SAAAlB,GAAC,OAAIA,EAAEW,UAAOE,EAAdC,EAAVK,EAAAjC,gBAAAf,KACV2B,eACRgB,EAAAM,Y,KAkBTC,EAAE,WAfqB,IACTP,EAAM,IAAMA,UAEI,aAAK1C,GAAAkD,KAAL,sCAAAC,KAAA,SAAAhC,GAFPiC,EAKVC,YACAf,EAAOgB,MAAC1B,EAPE","file":"wordcloud.js","sourcesContent":["class HslColorPicker {\n    constructor(hue) {\n        this.hue = d3.randomNormal(hue, 50);\n        this.saturation = d3.randomUniform(20, 100);\n        this.lightning = d3.randomUniform(30, 70);\n    }\n\n    getColor() {\n        const result = `hsl(${d3.min([255, d3.max([0, this.hue()])])}, ${this.saturation()}%, ${this.lightning()}%)`;\n        return result;\n    }\n}\n\nclass WordCloud {\n    constructor(id) {\n        this.id = id;\n        this.svg = d3.select(`#${id}`);\n        this.svgSize = undefined;\n        this.processingId = 0;\n        this.activeWordGroup = undefined;\n        this.setup();\n    }\n\n    setup() {\n        const main_color = 'whitesmoke';\n        let [sizeX, sizeY] = [700, 500];\n        this.svg.attr('viewBox', `0 0 ${sizeX} ${sizeY}`);\n        this.svgSize = {\n            x: sizeX,\n            y: sizeY\n        };\n    }\n\n    drawWords(words, layout, processId) {\n        if (processId === this.processingId) {\n            let appearTransition = d3.transition();\n\n            if (this.activeWordGroup !== undefined) {\n                appearTransition = appearTransition.delay(1000);\n                this.activeWordGroup\n                    .transition()\n                    .duration(1000)\n                    .style('opacity', 0)\n                    .remove();\n            }\n            const colorPicker = new HslColorPicker(126);\n            const maxSize = d3.max(words, d => d.size);\n            const newGroup = this.svg\n                .append('g')\n                .attr('transform', `translate(${layout.size()[0] / 2} ${layout.size()[1] / 2})`);\n            this.activeWordGroup = newGroup;\n            this.activeWordGroup\n                .selectAll('text')\n                .data(words)\n                .enter()\n                .append('text')\n                .attr('text-anchor', 'middle')\n                .attr('fill', (d, i) => colorPicker.getColor())\n                .attr('transform', d =>\n                    `translate(${d.x}, ${d.y}) rotate(${d.rotate})`)\n                .style('opacity', 0)\n                .style('font-size', d => `${d.size}px`)\n                .text(d => d.text)\n                .transition(appearTransition)\n                .duration(d => 500 + (1 - d.size / maxSize) * 2000)\n                .style('opacity', 1);\n        }\n    }\n\n    updateWords(words) {\n        const layout = d3.layout.cloud()\n            .size([this.svgSize.x, this.svgSize.y])\n            .words(words.map(w => ({\n                text: w\n            })))\n            .padding(5)\n            .rotate((d, i) => /*~~(Math.random() * 2)*/(i % 2) * 90)\n            .fontSize((d, i) => Math.max(15, 60 - i * 3))\n            .on('end', d => this.drawWords(d, layout, this.processingId));\n        this.processingId++;\n        layout.start();\n    }\n}\n\n$(() => {\n    const NUMBER_OF_WORDS = 300;\n\n    const cloud = new WordCloud(\n        'wordcloud');\n\n    d3.json('data/wordcloud-words-top-2000.json').then(words => {\n        cloud.updateWords(words.slice(0, NUMBER_OF_WORDS));\n    });\n});"]}