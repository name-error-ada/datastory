{"version":3,"sources":["lineplot.js"],"names":["LinePlot","id","data","_classCallCheck","this","svg","d3","select","concat","svgSize","undefined","margin","attr","y","right","bottom","left","width","x","height","top","sizeX","sizeY","append","sumstat","nest","key","d","name","entries","scaleLinear","call","axisBottom","ticks","max","n","range","year","res","map","color","domain","enter","scaleOrdinal","selectAll","line","values","$"],"mappings":"uZAAMA,S,WACF,SAAAA,EAAYC,EAAIC,GAAMC,gBAAAC,KAAAJ,GAClBI,KAAKF,KAAOA,EACZE,KAAKC,IAAMC,GAAGC,OAAH,IAAAC,OAAcP,IACzBG,KAAKK,aAAUC,EACfN,KAAKO,YAASD,E,0CALhBV,WACoBI,KAAAC,IAAAO,KAAA,UAAA,OAAAJ,OAAA,IAAA,KAAAA,OAAA,MAUlBJ,KAAKK,QAAU,CATVP,EADa,IAElBW,EAFkB,KAIlBT,KAAKO,OAASD,CAAAA,IAAd,GAAAI,MAAA,GAAAC,OAAA,GAAAC,KAAA,M,kBAaJ,WACI,IAAQC,EAAQb,KAAKK,QAAQS,EAAId,KAAKO,OAAOK,KAAOZ,KAAKO,OAAOG,MAXpEK,EAAAf,KAAQK,QAAAI,EAAAT,KAAAO,OAAAS,IAAAhB,KAAAO,OAAAI,OAECV,EAAIO,GAAKL,OAAA,eACTE,OAAL,OACOY,KADQ,QAAAJ,EAAAN,OAAAK,KAAAL,OAAAG,OAERQ,KAAAA,SAAAA,EAAAA,OAAAA,IAAAA,OAAAA,QAFPC,OAAA,KAIKZ,KAAL,YAAc,aAAAA,OAAAK,KAAA,IAAAL,OAAAS,IAAA,KAAqCI,EAAElB,GAAAmB,OAArDC,IAAA,SAAAC,GAAA,OAAAA,EAAAC,OACHC,QAAA3B,MAEDgB,EAAAZ,GAAAwB,cACYb,OAAQX,GAAKG,OAALP,KAAiB,SAAKS,GAAOK,OAAOW,EAAKhB,QACjDQ,MAAS,CAAA,EAAKV,IAoBtBJ,EAAIkB,OAAO,KAjBJX,KAAK,YAAQ,eACRO,EACPP,KAiBAmB,KAAKzB,GAAG0B,WAAWd,GAAGe,MAAM,IATd,IAAApB,EAAQP,GAACsB,cAC3BC,OAFa,CAEL3B,EAAAA,GAhBNgC,IAkBHhC,KAAA,SAAAyB,GAAA,OAAAA,EAAAQ,MAWCC,MAAM,CAAEjB,EAAQ,IAVjBd,EAAKkB,OAAMO,KAC+BC,KAAAzB,GAAS+B,SAATxB,IAc1C,IAAIyB,EAAMd,EAAQe,IAAI,SAASZ,GAAI,OAAOA,EAAED,MAPvCc,EAAMV,GAAAA,eAC4BW,OAAAH,GACtCF,MAAQjB,CAAAA,UAFT,UAAA,UAAA,UAAA,UAAA,UAAA,UAAA,UAAA,YAOAd,EAAIiC,UAAMd,SAAyBtB,KAAAsB,GAlChCkB,QA2CFnB,OAAO,QARJiB,KAAQlC,OAAGqC,QAUV/B,KAAK,SAAU,SAASe,GAAI,OAAOa,EAAMb,EAAED,OAL5CkB,KAAAA,eACEpB,KAI2BZ,KAAO4B,IAAQd,SAAfC,GAC5Bf,OAAKN,GAAAuC,OAEG3B,EAAC2B,SACHlB,GAAA,OAAYT,EAAAS,EAAAU,QAASnB,EAAES,SAATA,GAAA,OAAAd,GAAAc,EAAAQ,IAHf7B,CAICqB,EAAAmB,c,KAMnBC,EAAE","file":"lineplot.js","sourcesContent":["class LinePlot {\n    constructor(id, data) {\n        this.data = data;\n        this.svg = d3.select(`#${id}`);\n        this.svgSize = undefined;\n        this.margin = undefined;\n    }\n\n    setup() {\n        let [sizeX, sizeY] = [700, 500];\n        this.svg.attr('viewBox', `0 0 ${sizeX} ${sizeY}`);\n        this.svgSize = {\n            x: sizeX,\n            y: sizeY\n        };\n        this.margin = {top: 10, right: 30, bottom: 30, left: 60};\n    }\n\n    draw() {\n        const   width = this.svgSize.x - this.margin.left - this.margin.right,\n                height = this.svgSize.y - this.margin.top - this.margin.bottom;\n\n        // append the svg object to the body of the page\n        var svg = d3.select(\"#my_dataviz\")\n            .append(\"svg\")\n            .attr(\"width\", width + margin.left + margin.right)\n            .attr(\"height\", height + margin.top + margin.bottom)\n        .append(\"g\")\n            .attr(\"transform\",\n                \"translate(\" + margin.left + \",\" + margin.top + \")\");\n\n        // group the data: I want to draw one line per group\n        var sumstat = d3.nest() // nest function allows to group the calculation per level of a factor\n        .key(function(d) { return d.name;})\n        .entries(data);\n\n        // Add X axis --> it is a date format\n        var x = d3.scaleLinear()\n            .domain(d3.extent(data, function(d) { return d.year; }))\n            .range([ 0, width ]);\n        svg.append(\"g\")\n            .attr(\"transform\", \"translate(0,\" + height + \")\")\n            .call(d3.axisBottom(x).ticks(5));\n\n        // Add Y axis\n        var y = d3.scaleLinear()\n        .domain([0, d3.max(data, function(d) { return +d.n; })])\n        .range([ height, 0 ]);\n        svg.append(\"g\")\n        .call(d3.axisLeft(y));\n\n        // color palette\n        var res = sumstat.map(function(d){ return d.key }) // list of group names\n        var color = d3.scaleOrdinal()\n            .domain(res)\n            .range(['#e41a1c','#377eb8','#4daf4a','#984ea3','#ff7f00','#ffff33','#a65628','#f781bf','#999999'])\n\n        // Draw the line\n        svg.selectAll(\".line\")\n        .data(sumstat)\n        .enter()\n        .append(\"path\")\n            .attr(\"fill\", \"none\")\n            .attr(\"stroke\", function(d){ return color(d.key) })\n            .attr(\"stroke-width\", 1.5)\n            .attr(\"d\", function(d){\n            return d3.line()\n                .x(function(d) { return x(d.year); })\n                .y(function(d) { return y(+d.n); })\n                (d.values)\n            })\n    }\n}\n\n$(() => {\n    \n});"]}