{"version":3,"sources":["lineplot.js"],"names":["createPlotlyDataMeanWithSem","x","mean","sem","line_color","ci_color","name","bottom_values","map","v","i","top_values","mode","line","main_trace","undefined","showlegend","fill","bottom_trace","width","top_trace","fillcolor","createGeneralSentimentEvolutionPlot","id","data","traces","Plotly","newPlot","layout","type","tickformat","yaxis","tickmode","ticktext","tickvals","title","responsive","normalized","arguments","length","selectedEmotionSet","Set","to_enable_set","trace","y","has","showAttributeSentimentCorrelation","mainMain","slice","flatMap","xaxis","staticPlot","createEmotionEvolution","d3","json","then","genderData","occupationData"],"mappings":"aAAA,SAASA,4BAA4BC,EAAGC,EAAMC,EAAKC,EAAYC,EAAUC,GACrE,IAAMC,EAAgBL,EAAKM,IAAI,SAACC,EAAGC,GAAJ,OAAUD,EAAIN,EAAIO,KAD5CV,EAAAA,EAAAA,IAAAA,SAAAA,EAATU,GAASV,OAA+BE,EAAMC,EAA9CO,KA+Bc,MANQ,CAxBa,CAA/BT,EAAAA,EACMU,EAAAA,EAAsBC,KAAW,QAAvCC,KAAA,CAEMC,MAAaV,GAEZF,WAFYa,MAAAT,EAGXA,KAHWS,MAGTT,EAHSA,EAAA,IAKJF,CALIH,EAAAA,EAOfe,EAAAA,EACIJ,KAAM,QARdK,KAAA,OAUMC,KAAAA,CAAeC,MAAA,GAGbH,YAHa,EAIbV,KAAE,IAEK,CANML,EAAAA,EAQjBe,EAAAA,EACIJ,KAAE,QATVK,KAAA,UAWMG,UAAYf,EAAAQ,KAAA,CAEXF,MAFW,GAIVK,YAJU,EAKdK,KAAS,KAWhB,SAAAC,oCAAAC,EAAAC,GAsBSC,EAASzB,4BAnBLwB,EAAI,MADTF,EAAAA,KACUE,EAAA,IAmB0C,QAAS,yBAAqBT,GAS1FW,OAAAC,QAAAJ,EAAAE,EA1BoB,CAEXG,MAAS,CACJC,KAAA,OACGC,WADH,SAEHA,MAAY,QAHLC,MAAA,CAMJC,SAAA,QACHA,SAAU,CADP,gBAAA,cAAA,gBAEHC,SAAW,EAAA,EAAA,EAAA,GACXC,MAAU,EAAK,EAAG,GACbC,MAAE,8BAQX,CAEAC,YAAY,IAM0D,SAApCC,uBAAoCd,EAAAC,GAAA,IAAAa,EAAA,EAAAC,UAAAC,aAAAxB,IAAAuB,UAAA,IAAAA,UAAA,GAUpEE,EAAyBC,IAAIC,IAVuC,EAAAJ,UAAAC,aAAAxB,IAAAuB,UAAA,GAAAA,UAAA,GAAA,IAWpEb,EAAaD,EAACa,EAAa,kBAAoB,QAAY7B,IAAA,SAAAC,GACzDkC,IAAAA,EAAQ,CACHC,EAAAnC,EAAA,OACFe,EAAKA,EAAA,KACFf,KAAEA,EAAA,QACFG,KAAA,SAIT,OAFG4B,EAAmBK,IAAIpC,EAAC,WAAxB+B,EAAAA,QAAmBK,cAEtBF,IAILjB,OAAAC,QAAAJ,EAAAE,EAxB0E,CACpEG,MAAS,CACJO,MAAA,QADIJ,MAAA,CAIJI,MAAA,aAMX,CAeIC,YAAA,IAOR,SAASU,kCAAkCvB,EAAIC,GAA/C,IAASsB,EAAAA,CAAAA,iBAAAA,mBAA4C,mBAAA,oBAC3CC,EAAY,CAAA,sBAAkB,wBAAoB,wBAAxD,yBAGMtB,EAAaD,EAAC,OAAUwB,MAAf,EAA2BC,GAAAA,QAAQ,SAAAxC,EAAAC,GAAA,OAAAV,4BAAAwB,EAAUxB,KAA5DS,EAAA,KASMmB,EAAAA,IACFsB,EAAOxC,GACHyB,EAAOzB,GAFAD,EAAA,SAmBfiB,OAAAC,QAAAJ,EAAAE,EAfW,CAJXyB,MAAA,CASYf,MAAG,QAEXgB,MAAU,CAAQhB,MAAA,0EAItB,CAJIgB,YAAY,EAOlBf,YAAM,IAUAgB,EAAAA,WANJC,GAAAC,KAAA,yCAAAC,KAAA,SAAA/B,GAAA,OAaG8B,oCAAK,QAA0CC,KAAlDF,GAAAC,KAAA,6BAAAC,KAAA,SAAA/B,GAEG8B,uBACCR,cADJtB,GAnBJ,EASY,CAAC,QAAS,eAAgB,SAAU,QAAS,UACjD4B,uBACI,wBACA5B,GACA,EACA,CAAC,eAAgB,eAAgB,OAAQ,eAGjD6B,GAAGC,KAAK,0CAA0CC,KAAK,SAAAC,GAAU,OAC7DV,kCAAkC,2BAA4BU,KAClEH,GAAGC,KAAK,8CAA8CC,KAAK,SAAAE,GAAc,OACrEX,kCAAkC,+BAAgCW","file":"lineplot.js","sourcesContent":["function createPlotlyDataMeanWithSem(x, mean, sem, line_color, ci_color, name) {\n    const bottom_values = mean.map((v, i) => v - sem[i]);\n    const top_values = mean.map((v, i) => v + sem[i]);\n\n    const main_trace = {\n        x: x,\n        y: mean,\n        mode: 'lines',\n        line: {\n            color: line_color,\n        },\n        showlegend: name != undefined,\n        name: name != undefined ? name : '',\n    };\n    const bottom_trace = {\n        x: x,\n        y: bottom_values,\n        mode: 'lines',\n        fill: 'none',\n        line: {\n            width: 0\n        },\n        showlegend: false,\n        name: ''\n    };\n    const top_trace = {\n        x: x,\n        y: top_values,\n        mode: 'lines',\n        fill: 'tonexty',\n        fillcolor: ci_color,\n        line: {\n            width: 0\n        },\n        showlegend: false,\n        name: '',\n    };\n\n    return [\n        main_trace, bottom_trace, top_trace\n    ]\n}\n\nfunction createGeneralSentimentEvolutionPlot(id, data) {\n    const x = data['dates'];\n    const mean = data['mean'];\n    const sem = data['sem'];\n\n    const layout = {\n        xaxis: {\n            type: 'date',\n            tickformat: '%B, %Y',\n            title: 'Date'\n        },\n        yaxis: {\n            tickmode: \"array\",\n            ticktext: [\"Negative (-1)\", \"Neutral (0)\", \"Positive (1)\"],\n            tickvals: [-1, 0, 1],\n            range: [-1, 1],\n            title: 'Sentiment (numeric value)'\n        }\n    };\n\n    const traces = createPlotlyDataMeanWithSem(x, mean, sem, 'black', 'rgba(0, 0, 0, .1)', undefined);\n\n    const config = {\n        // displayModeBar: false, // hide bar\n        // staticPlot: true, // disable moving and zooming\n        responsive: true, // make plot resize with screen\n    };\n\n    Plotly.newPlot(id, traces, layout, config);\n}\n\nfunction createEmotionEvolution(id, data, normalized=false, to_enable_set=[]) {\n    const layout = {\n        xaxis: {\n            title: 'Year'\n        },\n        yaxis: {\n            title: 'Presence'\n        }\n    };\n\n    const selectedEmotionSet = new Set(to_enable_set);\n    const traces = data[normalized ? 'normalized_data' : 'data'].map(v => {\n        let trace = {\n            y: v['values'],\n            x: data['year'],\n            name: v['emotion'],\n            mode: 'lines',\n        };\n        if(!selectedEmotionSet.has(v['emotion'])) {\n            trace.visible = 'legendonly';\n        }\n        return trace\n    });\n\n    const config = {\n        // displayModeBar: false, // hide bar\n        // staticPlot: true, // disable moving and zooming\n        responsive: true, // make plot resize with screen\n    };\n\n    Plotly.newPlot(id, traces, layout, config);\n}\n\nfunction showAttributeSentimentCorrelation(id, data) {\n    const mainMain = ['rgb(255, 0, 0)', 'rgb(255, 153, 0)', 'rgb(0, 102, 255)', 'rgb(51, 204, 51)'];\n    const ciColors = ['rgba(255, 0, 0, .1)', 'rgba(255, 153, 0, .1)', 'rgba(0, 102, 255, .1)', 'rgba(51, 204, 51, .1)'];\n\n    const traces = data['values'].slice(0, 4).flatMap((v, i) => createPlotlyDataMeanWithSem(\n        data['year'],\n        v['mean'], \n        v['sem'], \n        mainMain[i], \n        ciColors[i],\n        v['value']\n    ));\n\n    const layout = {\n        xaxis: {\n            title: 'Year'\n        },\n        yaxis: {\n            title: 'Sentiment \\n(-1 being negative, 1 being positive and 0 being neutral)'\n        }\n    };\n\n    const config = {\n        // displayModeBar: false, // hide bar\n        staticPlot: true, // disable moving and zooming\n        responsive: true, // make plot resize with screen\n    };\n\n    Plotly.newPlot(id, traces, layout, config);\n}\n\n$(() => {\n    d3.json('data/general-sentiment-over-time.json').then(data =>\n        createGeneralSentimentEvolutionPlot('myDiv', data));\n\n    d3.json('data/empath_analysis.json').then(data => {\n        createEmotionEvolution(\n            'empathChart', \n            data, \n            false,\n            ['plant', 'healthy_food', 'animal', 'water', 'death']);\n        createEmotionEvolution(\n            'normalizedEmpathChart', \n            data, \n            true,\n            ['healthy_food', 'social_media', 'fear', 'children']);\n    });\n\n    d3.json('data/gender-sentiment-correlation.json').then(genderData => \n        showAttributeSentimentCorrelation('genderAttrSentimentPlots', genderData));\n    d3.json('data/occupation-sentiment-correlation.json').then(occupationData => \n        showAttributeSentimentCorrelation('occupationAttrSentimentPlots', occupationData));\n});"]}