{"version":3,"sources":["lineplot.js"],"names":["createPlotlyDataMeanWithSem","x","mean","sem","line_color","ci_color","name","bottom_values","map","v","i","top_values","mode","line","main_trace","undefined","showlegend","fill","bottom_trace","width","top_trace","fillcolor","createGeneralSentimentEvolutionPlot","id","data","traces","Plotly","newPlot","layout","type","tickformat","yaxis","tickmode","ticktext","tickvals","title","responsive","normalized","arguments","length","to_enable_set","selector","selectedEmotionSet","Set","trace","has","visible","showAttributeSentimentCorrelation","mainMain","ciColors","slice","flatMap","xaxis","staticPlot","createEmotionEvolution","d3","json","then","genderData","occupationData"],"mappings":"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","file":"lineplot.js","sourcesContent":["function createPlotlyDataMeanWithSem(x, mean, sem, line_color, ci_color, name) {\n    const bottom_values = mean.map((v, i) => v - sem[i]);\n    const top_values = mean.map((v, i) => v + sem[i]);\n\n    const main_trace = {\n        x: x,\n        y: mean,\n        mode: 'lines',\n        line: {\n            color: line_color,\n        },\n        showlegend: name != undefined,\n        name: name != undefined ? name : '',\n    };\n    const bottom_trace = {\n        x: x,\n        y: bottom_values,\n        mode: 'lines',\n        fill: 'none',\n        line: {\n            width: 0\n        },\n        showlegend: false,\n        name: ''\n    };\n    const top_trace = {\n        x: x,\n        y: top_values,\n        mode: 'lines',\n        fill: 'tonexty',\n        fillcolor: ci_color,\n        line: {\n            width: 0\n        },\n        showlegend: false,\n        name: '',\n    };\n\n    return [\n        main_trace, bottom_trace, top_trace\n    ]\n}\n\nfunction createGeneralSentimentEvolutionPlot(id, data) {\n    const x = data['dates'];\n    const mean = data['mean'];\n    const sem = data['sem'];\n\n    const layout = {\n        xaxis: {\n            type: 'date',\n            tickformat: '%B, %Y',\n            title: 'Date'\n        },\n        yaxis: {\n            tickmode: \"array\",\n            ticktext: [\"Negative (-1)\", \"Neutral (0)\", \"Positive (1)\"],\n            tickvals: [-1, 0, 1],\n            range: [-1, 1],\n            title: 'Sentiment (numeric value)'\n        }\n    };\n\n    const traces = createPlotlyDataMeanWithSem(x, mean, sem, 'black', 'rgba(0, 0, 0, .1)', undefined);\n\n    const config = {\n        // displayModeBar: false, // hide bar\n        // staticPlot: true, // disable moving and zooming\n        responsive: true, // make plot resize with screen\n    };\n\n    Plotly.newPlot(id, traces, layout, config);\n}\n\nfunction createEmotionEvolution(id, data, normalized=false, to_enable_set=[], selector='emotion') {\n    const layout = {\n        xaxis: {\n            title: 'Year'\n        },\n        yaxis: {\n            title: normalized ? 'Presence (normalized by peak presence of the topic)' : 'Presence'\n        }\n    };\n\n    const selectedEmotionSet = new Set(to_enable_set);\n    const traces = data[normalized ? 'normalized_data' : 'data'].map(v => {\n        let trace = {\n            y: v['values'],\n            x: data['year'],\n            name: v[selector],\n            mode: 'lines',\n        };\n        if(!selectedEmotionSet.has(v[selector])) {\n            trace.visible = 'legendonly';\n        }\n        return trace\n    });\n\n    const config = {\n        // displayModeBar: false, // hide bar\n        // staticPlot: true, // disable moving and zooming\n        responsive: true, // make plot resize with screen\n    };\n\n    Plotly.newPlot(id, traces, layout, config);\n}\n\nfunction showAttributeSentimentCorrelation(id, data) {\n    const mainMain = ['rgb(255, 0, 0)', 'rgb(255, 153, 0)', 'rgb(0, 102, 255)', 'rgb(51, 204, 51)'];\n    const ciColors = ['rgba(255, 0, 0, .1)', 'rgba(255, 153, 0, .1)', 'rgba(0, 102, 255, .1)', 'rgba(51, 204, 51, .1)'];\n\n    const traces = data['values'].slice(0, 4).flatMap((v, i) => createPlotlyDataMeanWithSem(\n        data['year'],\n        v['mean'], \n        v['sem'], \n        mainMain[i], \n        ciColors[i],\n        v['value']\n    ));\n\n    const layout = {\n        xaxis: {\n            title: 'Year'\n        },\n        yaxis: {\n            title: 'Sentiment \\n(-1 is negative, 1 is positive and 0 is neutral)'\n        }\n    };\n\n    const config = {\n        // displayModeBar: false, // hide bar\n        staticPlot: true, // disable moving and zooming\n        responsive: true, // make plot resize with screen\n    };\n\n    Plotly.newPlot(id, traces, layout, config);\n}\n\n$(() => {\n    d3.json('data/general-sentiment-over-time.json').then(data =>\n        createGeneralSentimentEvolutionPlot('sentimentChange', data));\n\n    d3.json('data/empath_analysis.json').then(data => {\n        createEmotionEvolution(\n            'normalizedEmpathChart', \n            data, \n            true,\n            ['healthy_food', 'social_media', 'fear', 'children']);\n    });\n\n    d3.json('data/topic_evolution.json').then(data => {\n        createEmotionEvolution(\n            'topicChart', \n            data, \n            false,\n            ['Diet', 'Environment', 'Ethics', 'Health', 'Lifestyle'],\n            'topic');\n    })\n\n    d3.json('data/gender-sentiment-correlation.json').then(genderData => \n        showAttributeSentimentCorrelation('genderAttrSentimentPlots', genderData));\n    d3.json('data/occupation-sentiment-correlation.json').then(occupationData => \n        showAttributeSentimentCorrelation('occupationAttrSentimentPlots', occupationData));\n});"]}